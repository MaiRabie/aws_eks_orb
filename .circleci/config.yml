jobs:
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
  create-cluster:
    executor: aws-eks/python3
    steps:
      - run:
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/download/0.20.0/eksctl_Linux_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/create-cluster:
          cluster-name: my-eks-demo
          # kubernetes-version: "1.14"

  delete-cluster:
    executor: aws-eks/python3
    steps:
      - run:
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/download/0.20.0/eksctl_Linux_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/delete-cluster:
          cluster-name: my-eks-demo
          # kubernetes-version: "1.14"
  create-deployment:
    machine: true
    parameters:
      executor:
        type: executor
      region:
        type: string
        default: ""
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    # executor: aws-eks/python3
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-region: << parameters.region >>
          install-kubectl: true
      - run:
          command: |
            # chmod +x ./kubectl
            # sudo mv ./kubectl /usr/local/bin/kubectl
            # sudo apt-get install docker.io -y
            # curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
            # minikube version
            # minikube start --vm-driver=docker
            # minikube status
            # sudo chmod 666 /var/run/docker.sock
            docker --version
            dockerpath="78dadb74358b/capston"
            kubectl run my-eks-demo --image=$dockerpath --port=80
            kubectl get pods
            kubectl port-forward my-eks-demo 8000:80
            netstat -tulpn
            curl -v http://localhost:8080/index.html
      # - kubernetes/create-or-update-resource:
      #    resource-file-path: "tests/nginx-deployment/deployment.yaml"
      #    resource-name: "deployment/nginx-deployment"
      #    get-rollout-status: true
      #    show-kubectl-command: true


orbs:
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.12.0
version: 2.1
workflows:
  deployment:
    jobs:
      # - create-cluster
      # - test-cluster:
      #     cluster-name: my-eks-demo
      #     requires:
      #       - create-cluster
      - create-deployment:
          name: create-deployment-kubectl
          executor: aws-eks/python
          region: "us-east-2"
          cluster-name: my-eks-demo
          # requires:
          #   - create-cluster
      # - aws-eks/update-container-image:
      #    name: update-container-image-kubectl
      #    cluster-name: my-eks-demo
      #    aws-region: "us-east-2"
      #    resource-name: "deployment/nginx-deployment"
      #    container-image-updates: "nginx=78dadb74358b:helloworldweb"
      #    get-rollout-status: true
      #    record: true
      #    post-steps:
      #      - kubernetes/delete-resource:
      #          resource-types: "deployments"
      #          resource-names: "nginx-deployment"
      #          now: true
      #          wait: true
        #  requires:
        #    - create-deployment-kubectl          
      # - delete-cluster
      #     requires:
      #       - test-cluster

#version: 2.1
#
#orbs:
#  aws-eks: circleci/aws-eks@0.2.3
#  kubernetes: circleci/kubernetes@0.4.0
##  aws-eks: circleci/aws-eks@1.1.0
##  cli: circleci/circleci-cli@0.1.2
##  kubernetes: circleci/kubernetes@0.4.0
##  helm: circleci/helm@1.2.0
##  orb-tools: circleci/orb-tools@7.3.0
#
#
#jobs:
#  create-deployment:
#    parameters:
#      executor:
#        type: executor
#      region:
#        type: string
#        default: ""
#      cluster-name:
#        description: |
#          Name of the EKS cluster
#        type: string
#    executor: aws-eks/python3
#    steps:
#      - checkout
#      - aws-eks/update-kubeconfig-with-authenticator:
#          cluster-name: << parameters.cluster-name >>
#          aws-region: << parameters.region >>
#          install-kubectl: true
#      - kubernetes/create-or-update-resource:
#          resource-file-path: "tests/nginx-deployment/deployment.yaml"
#          resource-name: "deployment/nginx-deployment"
#          get-rollout-status: true
#          show-kubectl-command: true
#
#workflows:
#  deployment:
#    jobs:
#      - aws-eks/create-cluster:
##          name: setup-cluster-kubectl
#          cluster-name: ${AWS_RESOURCE_NAME_PREFIX}-eks-orb-test-kubectl
#          aws-region: "us-east-2"
#
#      - create-deployment:
#          name: create-deployment-kubectl
#          executor: aws-eks/python3
#          region: "us-east-2"
#          cluster-name: ${AWS_RESOURCE_NAME_PREFIX}-eks-orb-test-kubectl
#          requires:
#            - aws-eks/create-cluster
#

#              ********************************************************************************
#      - aws-eks/update-container-image:
#          name: update-container-image-kubectl
#          cluster-name: ${AWS_RESOURCE_NAME_PREFIX}-eks-orb-test-kubectl
#          aws-region: "ap-southeast-1"
#          resource-name: "deployment/nginx-deployment"
#          container-image-updates: "nginx=nginx:1.9.1"
#          get-rollout-status: true
#          record: true
#          post-steps:
#            - kubernetes/delete-resource:
#                resource-types: "deployments"
#                resource-names: "nginx-deployment"
#                now: true
#                wait: true
#          requires:
#            - create-deployment-kubectl
#          filters: *integration_test_filters
#      - aws-eks/delete-cluster:
#          name: delete-cluster-kubectl
#          cluster-name: ${AWS_RESOURCE_NAME_PREFIX}-eks-orb-test-kubectl
#          aws-region: "ap-southeast-1"
#          wait: true
#          requires:
#            - update-container-image-kubectl
#          filters: *integration_test_filters
  # Tag-triggered workflow to promote a dev orb into production.
  # The tag is expected to have been applied manually.
